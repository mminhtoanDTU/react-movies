{"version":3,"sources":["actions/movies.js","Logic/FormatString.js","Pages/SearchPage/index.jsx","Logic/SearchMovie.js"],"names":["fetchMovie","dispatch","a","axios","get","res","type","payload","data","phim","FormatString","str","toLowerCase","normalize","replace","Text","styled","h2","SearchPage","useState","isLoading","setIsLoading","listSearched","setListSearched","query","setQuery","moviesList","useSelector","state","movies","listMovies","search","useLocation","useDispatch","useEffect","queryMovie","URLSearchParams","newList","Data","string","Object","entries","forEach","item","title","includes","push","SearchMovie","setLoad","setTimeout","clearTimeout","length","TitleTop"],"mappings":"gNASaA,EAAa,yDAAM,WAAOC,GAAP,eAAAC,EAAA,sEACVC,IAAMC,IATV,mJAQc,OACtBC,EADsB,OAE5BJ,EAPmC,CACnCK,KAHa,WAIbC,QAKmBF,EAAIG,KAAKC,OAFA,2CAAN,wD,0ECTX,SAASC,EAAaC,GACjC,OAAOA,EAAIC,cACNC,UAAU,OACVC,QAAQ,mBAAoB,IAC5BA,QAAQ,UAAM,KACdA,QAAQ,UAAM,K,iDC+CvB,IAAMC,EAAOC,IAAOC,GAAV,uHAOKC,UAjDf,WAEI,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAaC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,cAC/CC,EAAWC,cAAXD,OAEA9B,EAAWgC,cAsBjB,OArBAC,qBAAU,WACNjC,EAASD,iBACV,CAACC,IAEJiC,qBAAU,WACN,IACMC,EAAazB,EADL,IAAI0B,gBAAgBL,GACI3B,IAAI,MAC1CqB,EAASU,MAGbD,qBAAU,WACNb,GAAa,GACb,IAAMgB,EC9BP,WAEH,IAF4C,IAApBC,EAAmB,uDAAZ,GAAIC,EAAQ,uCACrCF,EAAU,GAChB,MAAqBG,OAAOC,QAAQH,GAApC,eAA2C,CAA1B,KACN,GAAGI,SAAQ,SAAAC,GACVjC,EAAaiC,EAAKC,OAAOC,SAASN,IAClCF,EAAQS,KAAKH,MAIzB,OAAON,EDqBaU,CAAYrB,EAAYF,GACxCD,EAAgBc,GAChB,IAAMW,EAAU,kBAAMC,YAAW,WAC7B5B,GAAa,KACd,MAEH,OADA2B,IACOE,aAAaF,KACrB,CAACxB,IAEAJ,EAAkB,cAAC,IAAD,IAElB,mCACME,EAAa6B,OAEX,cAAC,IAAD,CAAUb,KAAMhB,EAAc8B,SAAQ,kDAA2B5B,KADjE,cAACT,EAAD","file":"static/js/10.3dd9b216.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst API_MOIVE = 'https://api.apify.com/v2/key-value-stores/QubTry45OOCkTyohU/records/LATEST?fbclid=IwAR0iqL6-Rw3oEryVIh2nSoSKpSEjn3KlA9GYaKjPpDO3zceHs-ql7BOLMPY';\r\nconst SET_DATA = 'SET_DATA'\r\n\r\nexport const setMovies = listMovie => ({\r\n    type: SET_DATA,\r\n    payload: listMovie\r\n})\r\n\r\nexport const fetchMovie = () => async (dispatch) => {\r\n    const res = await axios.get(API_MOIVE)\r\n    dispatch(setMovies(res.data.phim));\r\n}\r\n","export default function FormatString(str) {\r\n    return str.toLowerCase()\r\n        .normalize(\"NFD\")\r\n        .replace(/[\\u0300-\\u036f]/g, \"\")\r\n        .replace(/đ/g, \"d\")\r\n        .replace(/Đ/g, \"D\");\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport FormatString from '../../Logic/FormatString';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchMovie } from '../../actions/movies';\r\nimport { Loading, ShowList } from '../../components';\r\nimport { SearchMovie } from '../../Logic/SearchMovie';\r\nimport styled from 'styled-components';\r\n\r\nfunction SearchPage() {\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [listSearched, setListSearched] = useState([]);\r\n    const [query, setQuery] = useState('');\r\n\r\n    const moviesList = useSelector(state => state.movies.listMovies);\r\n    let { search } = useLocation();\r\n    //fetch list\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchMovie());\r\n    }, [dispatch])\r\n    //get query\r\n    useEffect(() => {\r\n        const queri = new URLSearchParams(search);\r\n        const queryMovie = FormatString(queri.get('q'));\r\n        setQuery(queryMovie);\r\n    })\r\n    //\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        const newList = SearchMovie(moviesList, query);\r\n        setListSearched(newList);\r\n        const setLoad = () => setTimeout(() => {\r\n            setIsLoading(false);\r\n        }, 2000);\r\n        setLoad();\r\n        return clearTimeout(setLoad)\r\n    }, [query]);\r\n\r\n    if (isLoading) return <Loading />\r\n    return (\r\n        <>\r\n            {!listSearched.length ?\r\n                <Text>Tiếc quá đi 😥 hổng có phim bạn cần tìm rồi.</Text> :\r\n                <ShowList Data={listSearched} TitleTop={`Kết quả tìm kiếm cho: ${query}`} />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nconst Text = styled.h2`\r\n    color: #F1B722;\r\n    text-align: center;\r\n    font-size: 20px;\r\n    margin-top: 30px;\r\n`\r\n\r\nexport default SearchPage;","import FormatString from \"./FormatString\";\r\n\r\nexport function SearchMovie(Data = [], string) {\r\n    const newList = [];\r\n    for (const movies of Object.entries(Data)) {\r\n        movies[1].forEach(item => {\r\n            if (FormatString(item.title).includes(string)) {\r\n                newList.push(item);\r\n            }\r\n        })\r\n    }\r\n    return newList;\r\n}"],"sourceRoot":""}